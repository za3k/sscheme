; ============== BUILTINS ================
; TODO: set! set-cdr! set-car! '

; ============== ALIASES ================
(define empty? null?)
(define eqv? eq?)
(define symbol=? eq?)
(define string=? eq?) ; Strings are immutable in this Scheme
(define else #t)
(define / quotient)

; ============== FORMS (MACROS) ================
(define (list . x) x) ; Not a macro but very needed until we get ' notation
(define-macro (if x y z)
  (list 'cond (list x y) (list 'else z)))
(define-macro (and . clauses)
  (cond ((null? clauses) #t)
        ((null? (cdr clauses)) (car clauses))
        (else
            (list 'if (car clauses)
                      (cons 'and (cdr clauses))
                      #f))))
(define-macro (or . clauses) ; Note - this evaluates the truthy clause twice
  (cond ((null? clauses) #f)
        (else
            (list 'if (car clauses)
                      (car clauses)
                      (cons 'or (cdr clauses))))))

; TODO: case let let* letrec begin do quasiquote for-each named-let
; TODO: force delay

; ============== BOOLEANS ================
(define (boolean x) (if x #t #f))
(define (boolean? x)
  (or (eq? x #t) (eq? x #f)))
(define (not x) (if x #f #t))

; ============== HELPERS ================
; Helpers for later definitions
(define (map f l) ; todo varargs
  (if (null? l) l
      (cons (f (car l))
            (map f (cdr l)))))
(define (foldl proc init lst) ; todo vargs
  (if (null? lst)
      init
      (foldl proc (proc init (car lst)) (cdr lst))))
(define (foldr proc init lst) ; todo vargs
  (foldl proc init (reverse lst)))
(define (filter pred lst)
  (if (null? lst)
      lst
      (if (pred (car lst))
          (cons (car lst) (filter pred (cdr lst)))
          (filter pred (cdr lst)))))
  
(define (equal? a b)
  (or (eq? a b)
      (and (pair? a) 
           (pair? b)
           (equal? (car a) (car b))
           (equal? (cdr a) (cdr b)))))

; ============== NUMBERS ================
; Upgrade to builtins to support not exactly 2 arguments: - + * / < <= > >= =
(define _builtin- -)
(define _builtin+ +)
(define _builtin* *)
(define _builtin/ /)
(define _builtin< <)
(define (+ . lst)
    (cond ((null? lst) (error "WRONG_NUM_ARGUMENTS"))
          (else (foldl _builtin+ 0 lst))))
(define (- . lst)
    (cond ((= (length lst) 1) (_builtin- 0 (car lst)))
          ((= (length lst) 2) (_builtin- (car lst) (cadr lst)))
          (else (error "WRONG_NUM_ARGUMENTS"))))
(define (* . lst) (foldl _builtin* 1 lst))
(define (/ . lst)
    (cond ((null? lst) (error "WRONG_NUM_ARGUMENTS"))
          ((= (length lst) 1) (_builtin/ 1 (car lst)))
          (else (foldl _builtin/ (car lst) (cdr lst)))))

(define (monotone cmp)
  (lambda lst
    (cond ((null? lst) (error "WRONG_NUM_ARGUMENTS"))
          ((null? (cdr lst)) #t)
          ((not (cmp (first lst) (second lst))) #f)
          (else (apply (monotone cmp) (cdr lst))))))
(define <  (monotone _builtin<))
(define =  (monotone eq?))
(define <= (monotone (lambda (x y) (not (_builtin< y x)))))
(define >  (monotone (lambda (x y)      (_builtin< y x))))
(define >= (monotone (lambda (x y) (not (_builtin< x y)))))

(define (max . lst)
  (foldl (lambda (x y) (if (< x y) y x))
         (car lst)
         (cdr lst)))
(define (min . lst)
  (foldl (lambda (x y) (if (< x y) x y))
         (car lst)
         (cdr lst)))
(define (negative? x) (< x 0))
(define (positive? x) (< 0 x))
(define (zero? x) (= x 0))
(define (remainder x y)
 (- x (* (quotient x y) y)))
(define (modulo x y)
 (if (or (and (negative? x) (negative? y))
         (and (not (negative? x)) (positive? y)))
     (remainder x y)
     (+ (remainder x y) y)))
(define (even? x) (= (modulo x 2) 0))
(define (odd? x) (= (modulo x 2) 1))
(define (abs x) (if (negative? x) (- x) x))

(define (number->string n)
  (cond ((zero? n) "0")
        ((negative? n) (string-append "-" (number->string (- n))))
        ((<= 0 n 9) (string (string-ref "0123456789" n)))
        (else (string-append (number->string (quotient n 10))
                             (number->string (remainder n 10))))))
(define digit-chars '((#\0 0) (#\1 1) (#\2 2) (#\3 3) (#\4 4) (#\5 5) (#\6 6) (#\7 7) (#\8 8) (#\9 9)))
(define (charlist->number l)
  (cond ((null? l) 0)
        ((eq? #\- (car l))
          (- (charlist->number (cdr l))))
        ((assq (car l) digit-chars)
          (+ (cadr (assq (car l) digit-chars))
             (* 10 (charlist->number (cdr l)))))
        (else (error "Not a valid number in charlist->number"))))
(define (string->number s)
  (if (eq? "" s)
      (error "Not a valid number in string->number")
      (charlist->number (reverse (string->list s)))))

; TODO: gcd lcm expt
; TODO: range

; ============== LISTS AND PAIRS ================
(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))
(define (caaar x) (car (caar x)))
(define (caadr x) (car (cadr x)))
(define (cadar x) (car (cdar x)))
(define (caddr x) (car (cddr x)))
(define (cdaar x) (cdr (caar x)))
(define (cdadr x) (cdr (cadr x)))
(define (cddar x) (cdr (cdar x)))
(define (cdddr x) (cdr (cddr x)))
(define (caaaar x) (car (caaar x)))
(define (caaadr x) (car (caadr x)))
(define (caadar x) (car (cadar x)))
(define (caaddr x) (car (caddr x)))
(define (cadaar x) (car (cdaar x)))
(define (cadadr x) (car (cdadr x)))
(define (caddar x) (car (cddar x)))
(define (cadddr x) (car (cdddr x)))
(define (cdaaar x) (cdr (caaar x)))
(define (cdaadr x) (cdr (caadr x)))
(define (cdadar x) (cdr (cadar x)))
(define (cdaddr x) (cdr (caddr x)))
(define (cddaar x) (cdr (cdaar x)))
(define (cddadr x) (cdr (cdadr x)))
(define (cdddar x) (cdr (cddar x)))
(define (cddddr x) (cdr (cdddr x)))
(define first car)
(define rest cdr)
(define second cadr)
(define third caddr)
(define fourth cadddr)
(define (fifth x) (car (cddddr x)))
(define (sixth x) (cadr (cddddr x)))
(define (seventh x) (caddr (cddddr x)))
(define (eighth x) (cadddr (cddddr x)))
(define (ninth x) (car (cddddr (cddddr x))))
(define (tenth x) (cadr (cddddr (cddddr x))))

(define (last l)
 (if (null? (cdr l))
     (car l)
     (last (cdr l))))
(define (list? l)
 (if (null? l) 
     #t
     (if (pair? l)
         (list? (cdr l))
         #f)))
(define (length l)
  (if (null? l)
      0
      (+ 1 (length (cdr l)))))
(define (append l1 l2) ; todo varargs
  (if (null? l1)
      l2
      (cons (car l1) (append (cdr l1) l2))))
(define (reverse l)
  (if (null? l)
      l
      (append (reverse (cdr l)) (list (car l)))))
(define (list-tail lst pos)
  (if (= pos 0) lst
      (list-tail (cdr lst) (- pos 1))))
(define (list-ref lst pos)
  (car (list-tail lst pos)))

(define (remove v lst proc) ; todo proc=equal? optional
  (if (null? lst) lst
      (if (proc v (car lst))
          (cdr lst)
          (cons (car lst) (remove v (cdr lst) proc)))))
(define (remq v lst) (remove v lst eq?))
(define (remv v lst) (remove v lst eqv?))

(define (assf pred lst)
  (if (null? lst)
      #f
      (if (pred (caar lst))
          (car lst)
          (assf pred (cdr lst)))))
(define (assoc v lst is-equal?) ; todo is-equal?=equal? is optional
  (assf (lambda (k) (is-equal? k v))
        lst))
(define (assv v lst) (assoc v lst eqv?))
(define (assq v lst) (assoc v lst eq?))

(define (member v lst cmp) ; todo proc=equal? optional
  (cond ((null? lst) #f)
        ((cmp v (car lst)) lst)
        (else (member v (cdr lst) cmp))))
(define (memv v lst) (member v lst eqv?))
(define (memq v lst) (member v lst eq?))

; ============== CHARACTERS ================
(define char=? eq?)
(define (char<?  a b) (<  (char->integer a) (char->integer b)))
(define (char<=? a b) (<= (char->integer a) (char->integer b)))
(define (char>?  a b) (>  (char->integer a) (char->integer b)))
(define (char>=? a b) (>= (char->integer a) (char->integer b)))

(define (char-upper-case? c) (boolean (memq c (string->list "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))))
(define (char-lower-case? c) (boolean (memq c (string->list "abcdefghijklmnopqrstuvwxyz"))))
(define (char-numeric? c) (boolean (memq c (string->list "0123456789"))))
(define (char-alphabetic? c) (or (char-upper-case? c) (char-lower-case? c)))
(define (char-whitespace? c) (boolean (memq c '(#\space #\tab #\page #\linefeed #\return))))

(define (char-upcase c)
  (if (char-lower-case? c)
      (integer->char (- (char->integer c) 32))
      c))
(define (char-downcase c)
  (if (char-upper-case? c)
      (integer->char (+ (char->integer c) 32))
      c))

(define (char-ci=? x y) (char=? (char-downcase x) (char-downcase y)))
(define (char-ci<? x y) (char<? (char-downcase x) (char-downcase y)))
(define (char-ci<=? x y) (char<=? (char-downcase x) (char-downcase y)))
(define (char-ci>? x y) (char>? (char-downcase x) (char-downcase y)))
(define (char-ci>=? x y) (char>=? (char-downcase x) (char-downcase y)))

; ============== STRINGS ================
(define (string . chars) (list->string chars))
(define (string-length l) (length (string->list l)))
(define (string-ref l k) (list-ref (string->list l) k))
(define (string-append . strings)
  (list->string
    (apply append (map string->list strings))))


(define (sublist lst start end)
  (if (<= start 0)
      (if (<= end 0)
          ()
          (cons (car lst) (sublist (cdr lst) start (- end 1))))
      (sublist (cdr lst) (- start 1) (- end 1))))
(define (substring string start end)
  (list->string (sublist (string->list string) start end)))

(define (list<? cmp)
  (lambda (a b)
    (cond ((and (null? a) (null? b)) #f)
          ((null? a) #t)
          ((null? b) #f)
          ((cmp (car a) (car b)) #t)
          ((cmp (car b) (car a)) #f)
          (else ((list<? cmp) (cdr a) (cdr b))))))
(define (string<? a b)
    ((list<? char<?) (string->list a)
                     (string->list b)))
(define (string<=? a b) (or (string=? a b) (string<? a b)))
(define (string>=? a b) (or (string=? a b) (string<? b a)))
(define (string>? a b) (string<? b a))

(define (string-downcase x) (list->string (map char-downcase (string->list x))))
(define (string-upcase x) (list->string (map char-upcase (string->list x))))
(define (string-ci=? a b) (string=? (string-downcase a) (string-downcase b)))
(define (string-ci<? a b)
    (string<? (string-downcase a)
              (string-downcase b)))
(define (string-ci<=? a b) (or (string-ci=? a b) (string-ci<? a b)))
(define (string-ci>=? a b) (or (string-ci=? a b) (string-ci>? b a)))
(define (string-ci>? a b) (string-ci<? b a))

; ============== SYMBOLS ================
; (none)

; ============== I/O ================
; TODO: write display newline
; TODO: read read-char peek-char eof-object? char-ready? write display newline write-char
; TODO: load transcript-on transcript-off call-with-input-file call-with-output-file input-port? output-port? current-input-port current-output-port with-input-from-file with-output-to-file open-input-file open-output-file close-input-port close-output-port

; ============== CONTINUATIONS AND ENVIRONMENT ================
; TODO: scheme-report-environment null-environment interaction-environment
; TODO: call-with-current-continuation values call-with-values call-with-values dynamic-wind

; ============== MISC ================
; TODO: standard error messages
; TODO: support default values in lambda syntax?
