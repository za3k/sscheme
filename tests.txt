; Constants
() => ()
nil => nil
#t => #t
#f => #f

; Number parsing
1 => 1
10 => 10
100 => 100
-10 => -10
-symbol_name => err

; Decimal, Octal, Hex parsing
#d10 => 10
#o10 => 8
#x10 => 16
#d-10 => -10
#o-10 => -8
#x-10 => -16
#d12 => 12
#o12 => 10
#x12 => 18
#x100 => 256

; Character constants
#\a => #\a
#\m => #\m
#\z => #\z
#\A => #\A
#\M => #\M
#\Z => #\Z
#\nul => #\nul
#\soh => #\soh
#\bel => #\bel
#\bs  => #\bs
#\lf  => #\lf
#\vt  => #\vt
#\cr  => #\cr
#\esc => #\esc
#\sp  => #\sp
#\del => #\del
#\alarm     => #\bel
#\backspace => #\bs
#\tab       => #\ht
#\linefeed  => #\lf
#\newline   => #\lf
#\vtab      => #\vt
#\page      => #\ff
#\return    => #\cr
#\escape    => #\esc
#\space     => #\sp
#\delete    => #\del

; String parsing

"abc" => "abc"
"" => ""
" => err
"'" => "'"
"\"" => "\""
"\\" => "\\"
"\a" => "\a"
"\b" => "\b"
"\f" => "\f"
"\n" => "\n"
"\r" => "\r"
"\t" => "\t"
"\v" => "\v"
"\d" => "d"

; Lists
(1 2 3) => err
(list 1 2 3) => (1 2 3)
(quote (1 2 3)) => (1 2 3)
'(1 2 3) => (1 2 3)
'(1  (2 3) 4) => (1 (2 3) 4)

; Pairs
(quote (1 2 . 3)) => (1 2 . 3)
(quote (1 . 2)) => (1 . 2)
(quote (. 2)) => err
(quote (1 2 . 3 4)) => err
(quote (1 2 3 . ())) => (1 2 3)

; Symbols
'nil => :nil

; Quotes
'1 => 1
'(1 2 3) => (1 2 3)
'nil => :nil
''nil => (quote :nil)

; Quasiquotes
`,2 => 2
`(4 4 4) => (4 4 4)
`(4 ,(+ 1 2) 4) => (4 3 4)
`(4 ,(list 1 2) 4) => (4 (1 2) 4)
`(4 ,@(list 1 2) 4) => (4 1 2 4)

; Primitive/symbol resolution
+ => proc
- => proc
apply => proc
car => proc
cdr => proc
char? => proc
cons => proc
eq? => proc
list => proc
pair? => proc
number? => proc
display => proc
procedure? => proc
string? => proc
else => #t
NewVar => err

; Make sure multiple expressions works
1 2 => 2

; Tests for each form
(quote) => err
(quote 1 2) => err
(quote a) => :a
(quote 1) => 1
(quote ()) => ()
(quote quote) => :quote
(quote NewVar) => :NewVar
(quote nil) => :nil
(quote #t) => #t
(quote #f) => #f
(quote (a b c)) => (:a :b :c)

((lambda () 1)) => 1
((lambda (x) 1) 2) => 1
((lambda (x) x) 1) => 1
((lambda (x y) x) 1 2) => 1
((lambda (x y) y) 1 2) => 2
(lambda (x) x) => proc
((lambda (x y) (x y)) car '(2 3)) => 2
((lambda (x y) (x y)) (lambda (y) (car y)) '(2 3)) => 2
  ; Wrong argument counts
((lambda (x) x) 1) => 1
((lambda (x) x) 1 2) => err
((lambda (x) x)) => err

; Variadic arguments
((lambda x (car x)) '(1 2 3) '(4 5 6)) => (1 2 3)
((lambda (x . y) (car x)) '(1 2 3) '(4 5 6)) => 1
((lambda (x . y) (car y)) '(1 2 3) '(4 5 6)) => (4 5 6)
((lambda (x y) (car y)) '(1 2 3) '(4 5 6)) => 4


(cond ((eq? 2 3) (quote a)) ((eq? 2 4) 5) (else (quote b))) => :b
(cond ((eq? 2 3) (quote a))
      ((eq? 2 4) 5)
      (else (quote b)))
    => :b
(cond ((eq? 2 3) (quote a))
      ((eq? 4 4) 5)
      (else (quote b)))
    => 5
(cond ((eq? 2 2) (quote a))
      ((eq? 2 4) 5)
      (else (quote b)))
    => :a

(define x 2) x => 2
(define x 1) (define y 2) x => 1
(define x 1) (define y 2) y => 2
(define x car) x => proc

(define x 1)
(define y 2)
x => 1

(define (f x y) (car y))
(f '(1 2 3) '(4 5 6)) => 4
(define (f . y) (car y))
(f '(1 2 3) '(4 5 6)) => (1 2 3)
(define (f x . y) (car y))
(f '(1 2 3) '(4 5 6)) => (4 5 6)

(define-macro f (lambda (x y) (list x y))) (f car '(1 2)) => 1

; Tests for each builtin
(list) => ()
(list 1) => (1)
(list 1 2) => (1 2)
(list 1 2 3) => (1 2 3)
(list 1 (list 2 (list 3))) => (1 (2 (3)))

(+ 1 2) => 3
(+ 1 '(2 3)) => err

(-) => err
(- 5) => -5
(- 10 2) => 8
(- 2 10) => -8
(- 1 2 3) => err
(- 1 2 3 4) => err
(- 1 '(1 2)) => err

(apply _builtin+ '(1 2)) => 3

(< 1 2) => #t
(< 1 1) => #f
(< 2 1) => #f

(quotient 100 9) => 11
(quotient 100 0) => err
(* 10 11) => 110
(* 0 11) => 0
(* 5 -5) => -25
(* -5 5) => -25
(* -5 -5) => 25

(char->integer #\a) => 97
(integer->char 97) => #\a
(list->string '(#\a #\b #\c)) => "abc"
(string->list "abc") => (#\a #\b #\c)
(string->symbol "abc") => :abc
(symbol->string (quote abc)) => "abc"

; Tests for the standard library
(if #t 1 2) => 1
(if #f 1 2) => 2
(if (= 2 2) (+ 3 3) (+ 4 4)) => 6

(and) => #t
(and 1 2 3) => 3
(and 1 #f 3) => #f

(or) => #f
(or #f 1 2) => 1
(or #f #f #f) => #f

(not 4) => #f
(not #t) => #f
(not #f) => #t

(first '(1 2 3 4 5 6 7 8 9 10)) => 1
(second '(1 2 3 4 5 6 7 8 9 10)) => 2
(third '(1 2 3 4 5 6 7 8 9 10)) => 3
(fourth '(1 2 3 4 5 6 7 8 9 10)) => 4
(fifth '(1 2 3 4 5 6 7 8 9 10)) => 5
(sixth '(1 2 3 4 5 6 7 8 9 10)) => 6
(seventh '(1 2 3 4 5 6 7 8 9 10)) => 7
(eighth '(1 2 3 4 5 6 7 8 9 10)) => 8
(ninth '(1 2 3 4 5 6 7 8 9 10)) => 9
(tenth '(1 2 3 4 5 6 7 8 9 10)) => 10
(last '(1 2 3 4 5 6 7 8 9 10)) => 10
(rest '(1 2 3 4 5 6 7 8 9 10)) => (2 3 4 5 6 7 8 9 10)

; Upgraded builtins
(+) => err
(+ 1) => 1
(+ 1 2 3) => 6
(+ 1 '(2 3) 4) => err
(/ 1) => 1
(/ 100) => 0
(/ 10 100) => 0
(/ 100 10) => 10
(/ 101 10) => 10
(/ 100 5 5) => 4
(* 2 2 2 2 2 2) => 64
(< 1 2 3) => #t
(< 1 1 3) => #f
(< 1 2 2) => #f
(= 1 1 2) => #f
(= 1 2 2) => #f
(= 1 1 1) => #t

(modulo 12 4) => 0
(remainder 12 4) => 0

(modulo 13 4) => 1
(remainder 13 4) => 1

(modulo -13 4) => 3
(remainder -13 4) => -1

(modulo 13 -4) => -3
(remainder 13 -4) => 1

(modulo -13 -4) => -1
(remainder -13 -4) => -1

(gcd 32 36) => 4
(gcd 32 -36) => 4
(gcd 32 -36 42) => 2
(gcd 1 10) => 1
(gcd) => 0

(lcm) => 1
(lcm 4) => 4
(lcm 4 6) => 12
(lcm 4 6 9) => 36

(number->string 0) => "0"
(number->string 2) => "2"
(number->string -2) => "-2"
(number->string 25) => "25"
(number->string -25) => "-25"

(odd? 0) => #f
(odd? 1) => #t
(odd? 2) => #f
(even? 0) => #t
(even? 1) => #f
(even? 2) => #t
(positive? -1) => #f
(positive? 0) => #f
(positive? 1) => #t
(zero? -1) => #f
(zero? 0) => #t
(zero? 1) => #f
(negative? -1) => #t
(negative? 0) => #f
(negative? 1) => #f

(abs 2) => 2
(abs 0) => 0
(abs -2) => 2

(expt 2 6) => 64

(range 5) => (0 1 2 3 4)
(range) => err
(range 4 10) => (4 5 6 7 8 9)
(range 4 10 3) => (4 7)

(list? ()) => #t
(list? (list 1 2 3)) => #t
(list? '(1 2 3)) => #t
(list? (cons 1 2)) => #f
(list? '(1 . 2)) => #f
(list? '(1 2 . 3)) => #f
(list? 2) => #f

(length ()) => 0
(length (list 2 3 4)) => 3

(map (lambda (x) (+ x 10)) '(1 2 3)) => (11 12 13)

(append '(1 2 3) '(4 5 6)) => (1 2 3 4 5 6)
(append '(1 2 3) ()) => (1 2 3)
(append () '(4 5 6)) => (4 5 6)
(append () ()) => ()

(reverse '(1 2 3)) => (3 2 1)
(reverse ()) => ()
(reverse '(1)) => (1)

(list-tail (quote (a b c)) 1) => (:b :c)
(list-ref (quote (a b c)) 1) => :b
(list-ref '(10 11 12) 1) => 11

(foldl + 0 '(10 11 12)) => 33
(foldr + 0 '(10 11 12)) => 33
(filter number? '(10 #\d 13 "hello" '(b))) => (10 13)

(remove 2 '(1 2 3) eq?) => (1 3)
(remove 2 '(1 2 3 2) eq?) => (1 3 2)
(remq 2 '(1 2 3)) => (1 3)
(remq 2 '(1 2 3 2)) => (1 3 2)

(assoc 3 '((1 2) (3 4) (5 6)) eq?) => (3 4)
(assq  3 '((1 2) (3 4) (5 6))) => (3 4)
(assv  3 '((1 2) (3 4) (5 6))) => (3 4)
(assf number? '((#\d 2) (3 4) (5 6))) => (3 4)

(= (+ 2 2) 4) => #t
(= (+ 1 2) 4) => #f

(char=? #\a #\z) => #f
(char=? #\a #\a) => #t
(char<? #\a #\z) => #t
(char<? #\a #\z) => #t
(char<? #\a #\a) => #f
(char<? #\z #\a) => #f
(char<=? #\a #\z) => #t
(char<=? #\a #\a) => #t
(char<=? #\z #\a) => #f
(char>? #\a #\z) => #f
(char>? #\a #\a) => #f
(char>? #\z #\a) => #t
(char>=? #\a #\z) => #f
(char>=? #\a #\a) => #t
(char>=? #\z #\a) => #t

(char-upper-case? #\a) => #f
(char-upper-case? #\A) => #t
(char-upper-case? #\0) => #f
(char-lower-case? #\a) => #t
(char-lower-case? #\A) => #f
(char-lower-case? #\0) => #f

(char-downcase #\m) => #\m
(char-downcase #\M) => #\m
(char-downcase #\0) => #\0
(char-upcase #\m) => #\M
(char-upcase #\M) => #\M
(char-upcase #\0) => #\0

(string-upcase "abc") => "ABC"
(string-upcase "ABC") => "ABC"
(string-downcase "abc") => "abc"
(string-downcase "ABC") => "abc"

(equal? 1 1) => #t
(equal? 1 2) => #f
(equal? 1 null?) => #f
(equal? null? null?) => #t
(equal? '(1 2 3) 1) => #f
(equal? '(1 2 3) '(1 2 3)) => #t
(equal? '(1 2 3) '(4 5 6)) => #f

(substring "arduous" 2 5) => "duo"

(number->string 25) => "25"
(number->string -25) => "-25"
(number->string 0) => "0"
(string->number "25") => 25
