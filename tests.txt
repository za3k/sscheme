# Constants
() => ()
nil => nil
#t => #t
#f => #f

# Numbers
1 => 1
10 => 10
100 => 100
-10 => -10
-symbol_name => err

# Decimal, Octal, Hex parsing
#d10 => 10
#o10 => 8
#x10 => 16
#d-10 => -10
#o-10 => -8
#x-10 => -16
#d12 => 12
#o12 => 10
#x12 => 18
#x100 => 256

# Character constants
#\a => #\a
#\m => #\m
#\z => #\z
#\A => #\A
#\M => #\M
#\Z => #\Z
#\nul => #\nul
#\soh => #\soh
#\bel => #\bel
#\bs  => #\bs
#\lf  => #\lf
#\vt  => #\vt
#\cr  => #\cr
#\esc => #\esc
#\sp  => #\sp
#\del => #\del
#\alarm     => #\bel
#\backspace => #\bs
#\tab       => #\ht
#\linefeed  => #\lf
#\newline   => #\lf
#\vtab      => #\vt
#\page      => #\ff
#\return    => #\cr
#\escape    => #\esc
#\space     => #\sp
#\delete    => #\del

# Lists
(1 2 3) => err
(list 1 2 3)) => (1 2 3)
(quote (1 2 3)) => (1 2 3)

# Primitive/symbol resolution
+ => +
- => -
car => car
cdr => cdr
cons => cons
eq? => eq?
list => list
pair? => pair?
number? => number?
display => display
procedure? => procedure?
NewVar => err
else => #t

(list) => ()
(list 1) => (1)
(list 1 2) => (1 2)
(list 1 2 3) => (1 2 3)
(list 1 (list 2 (list 3))) => (1 (2 (3)))

(quote) => err
(quote 1 2) => err
(quote a) => :a
(quote 1) => 1
(quote ()) => ()
(quote quote) => :quote
(quote NewVar) => :NewVar
(quote nil) => :nil
(quote #t) => #t
(quote #f) => #f

(+) => err
(+ 1) => 1
(+ 1 2) => 3
(+ 1 2 3) => 6
(+ 1 (list 2 3) 4) => err

(-) => err
(- 5) => -5
(- 10 2) => 8
(- 2 10) => -8
(- 1 2 3) => err
(- 1 2 3 4) => err
(- 1 (list 1 2)) => err

((lambda () 1)) => 1
((lambda (x) 1) 2) => 1
((lambda (x) x) 1) => 1
((lambda (x y) x) 1 2) => 1
((lambda (x y) y) 1 2) => 2
(lambda (x) x) => proc

(cond (((eq? 2 3) (quote a)) ((eq? 2 4) 5) (else (quote b)))) => :b
(cond (((eq? 2 3) (quote a))
       ((eq? 2 4) 5)
       (else (quote b))))
    => :b
(cond (((eq? 2 3) (quote a))
       ((eq? 4 4) 5)
       (else (quote b))))
    => 5
(cond (((eq? 2 2) (quote a))
       ((eq? 2 4) 5)
       (else (quote b))))
    => :a
